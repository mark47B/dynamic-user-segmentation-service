version: '3.8'
services:
  api:
    build: ./app/
    container_name: api
    restart: always
    environment:
      - ENV=${POSTGRES_CONTAINER_NAME}
      - POSTGRES_HOST=${POSTGRES_CONTAINER_NAME}
      - POSTGRES_CONTAINER_NAME=${POSTGRES_CONTAINER_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB_NAME=${POSTGRES_DB_NAME}
      - SERVER_PORT=${SERVER_PORT}
    env_file:
      - ./config/local.env
    ports:
      - ${SERVER_PORT}:8080
    networks:
      - pg-network
    depends_on:
      - postgres

  postgres:
    image: postgres:alpine
    container_name: ${POSTGRES_CONTAINER_NAME}
    env_file:
      - ./config/local.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - ${POSTGRES_PORT}:5432
    restart: on-failure:3
    networks:
      - pg-network


  pgweb_adminer:
    image: adminer
    container_name: 'adminer'
    env_file:
      - ./config/local.env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_CONTAINER_NAME}:${POSTGRES_PORT}/${POSTGRES_DB_NAME}?sslmode=disable
    ports:
      - ${ADMINER_PORT}:8080
    restart: on-failure:3
    depends_on:
      - postgres
    networks:
      - pg-network

volumes:
  pg-data:

networks:
  pg-network:
    driver: bridge